buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
  }
}

apply plugin: 'com.google.protobuf'
apply from: rootProject.file('readme.gradle')


ext {
  pbufSchema = file('protobuf/gtfs-realtime.proto').absolutePath
  jsonSchema = file('protobuf/gtfs-realtime.json').absolutePath
}

sourceSets.main.proto.srcDirs = ['protobuf']
//sourceSets.main.java.srcDirs 'gen'

protobuf {
  generatedFilesBaseDir = "$buildDir/generated/protobuf"

  protoc {
    artifact = 'com.google.protobuf:protoc:3.5.1-1'
  }
  generateProtoTasks {
    all().each { task ->
      task.group = 'protobuf'
      task.builtins {
        java {
          //outputSubDir = '../'
        }
      }

      task.outputs.upToDateWhen { false }
    }
  }
}
tasks.withType(com.google.protobuf.gradle.ProtobufExtract).all {
  group 'protobuf'
}

task generateGtfsSchema(type: JavaExec) {
  group "codegen"

  classpath configurations.create(name)
  dependencies.add(name,  project(':codegen-pbuf2jschema'), null)
  main project(':codegen-pbuf2jschema').startScripts.mainClassName

  inputs.files pbufSchema
  outputs.files jsonSchema

  args '-schema', pbufSchema
  args '-out', jsonSchema

  doFirst{
    println "generating gtfs json schema..."
    println getCommandLine().join(" ")
  }
}

task generateGtfsTypes(type: JavaExec) {
  group "codegen"
  dependsOn generateGtfsSchema
  generateCode.dependsOn it

  def template = file('codegen/generateGtfsTypes.groovy')
  def schema = generateGtfsSchema.outputs.files.singleFile
  def out = file('gen-types/')

  classpath = configurations.create(name)
  dependencies.add(name,  project(':codegen-jmodel'), null)
  main = project(":codegen-jmodel").startScripts.mainClassName

  inputs.files schema
  inputs.files template
  outputs.dirs out

  args '-prefix', "Gtfs"
  args '-pckg', "${project.group}.${project.name.replace('-','.')}"
  args '-data', schema
  args '-template', template
  args '-out', out

  sourceSets.main.java.srcDirs += out

  doFirst{
    delete out
    println "generating gtfs types..."
    println getCommandLine().join(" ")
  }
}

task generateGtfsConverter(type: JavaExec) {
  group "codegen"
  dependsOn generateGtfsSchema
  generateCode.dependsOn it

  def template = file('codegen/generateGtfsConverter.groovy')
  def schema = generateGtfsSchema.outputs.files.singleFile
  def out = file('gen-converter/')

  classpath = configurations.create(name)
  dependencies.add(name,  project(':codegen-jmodel'), null)
  main = project(":codegen-jmodel").startScripts.mainClassName

  inputs.files schema
  inputs.files template
  outputs.dirs out

  args '-prefix', "Gtfs"
  args '-pckg', "${project.group}.${project.name.replace('-','.')}"
  args '-data', schema
  args '-template', template
  args '-out', out

  sourceSets.main.java.srcDirs += out

  doFirst{
    delete out
    println "generating gtfs converter..."
    println getCommandLine().join(" ")
  }
}

// main dependencies
dependencies {
  compile 'com.google.protobuf:protobuf-java:3.5.1'

  compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
  compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
  compile "com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
}

// test dependencies
dependencies {
  testCompile project(':libs-testlib')
}