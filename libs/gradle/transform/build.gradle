import org.jetbrains.kotlin.gradle.internal.*
apply from: rootProject.file('readme.gradle')
apply from: rootProject.file('metainfo.gradle')
apply plugin: "kotlin-kapt"
//apply plugin: 'java-gradle-plugin'

kapt {
  generateStubs = true
  correctErrorTypes = true
}
afterEvaluate {
  tasks.withType(KaptTask)*.group("codegen")
  tasks.withType(KaptGenerateStubsTask)*.group("codegen")
}


/*gradlePlugin {
  plugins {
    transformPlugin {
      id = "com.satori.transform"
      implementationClass = "${pckg}.TransformPlugin"
    }
  }
}*/

// Write the plugin's classpath to a file to share with the tests
/*task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}*/


// main dependencies
dependencies {
  compile project(":libs-gradle-utils")

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
  compile gradleApi()

  compileOnly project(":libs-gradle-plugin-annotations")
}

// test dependencies
dependencies {
  testCompile project(':libs-testlib')
  testCompile gradleTestKit()
  //testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  //testRuntime files(createClasspathManifest)
}

// kapt dependencies
dependencies {
  kapt project(":libs-gradle-plugin-processor")
}