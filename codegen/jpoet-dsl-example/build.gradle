sourceSets {
  codegen {
    java.srcDirs = ['codegen/src']
    resources.srcDirs = ['codegen/res']
  }
}

task generateGraphqlClasses(type: JavaExec) {
  group 'codegen'
  generateCode.dependsOn it

  def out = file("gen")
  def schema = file("graphql/schema.graphqls")

  inputs.file(schema)
  outputs.dir(out)

  sourceSets.main.java.srcDir out

  classpath sourceSets.codegen.runtimeClasspath

  main = "${pckg}.App"
  args "-schema", schema
  args "-pckg", pckg
  args "-out", out

  doFirst {
    delete out
    println "generating code...."
    println commandLine.join(" ")
  }

  clean.doFirst {
    delete out
  }
}

// main dependencies
dependencies {
  compile project(":libs-common-kotlin")
  compile "com.graphql-java:graphql-java:6.0"
}

// test dependencies
dependencies {
  testCompile project(':libs-testlib')

  testCompile "ch.qos.logback:logback-classic:$logbackVersion"
  testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
}

// codegen dependencies
dependencies {
  codegenCompile project(":codegen-jpoet-dsl")
  codegenCompile "com.graphql-java:graphql-java:6.0"
  codegenCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
}
