/* ProtoBufParser.java */
/* Generated By:JavaCC: Do not edit this line. ProtoBufParser.java */
package com.satori.codegen.pbuf2jschema.parser;

import com.satori.codegen.pbuf2jschema.schema.*;
import java.util.*;

public class ProtoBufParser implements ProtoBufParserConstants {

  final public Unit parse() throws ParseException {Unit res;
    res = unit();
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Unit unit() throws ParseException {Unit unit = new Unit();
  Field f;
    unit.syntax = syntax();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPTION:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      option();
    }
    pack();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MESSAGE:
      case ENUM:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      f = type_def();
unit.addDefinition(f);
    }
    jj_consume_token(0);
{if ("" != null) return unit;}
    throw new Error("Missing return statement in function");
}

  final public Field type_def() throws ParseException {Field res;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENUM:{
      res = enum_def();
      break;
      }
    case MESSAGE:{
      res = message_def();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Field message_def() throws ParseException {Token t = token.next;
  Definition res = new Definition("object");
  Field f;
  String name;
    jj_consume_token(MESSAGE);
    name = name();
    jj_consume_token(33);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MESSAGE:
      case REQUIRED:
      case OPTIONAL:
      case REPEATED:
      case ENUM:
      case TYPE_INT:
      case TYPE_STRING:
      case TYPE_BOOL:
      case TYPE_LONG:
      case TYPE_DOUBLE:
      case TYPE_FLOAT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REQUIRED:
      case OPTIONAL:
      case REPEATED:
      case TYPE_INT:
      case TYPE_STRING:
      case TYPE_BOOL:
      case TYPE_LONG:
      case TYPE_DOUBLE:
      case TYPE_FLOAT:
      case ID:{
        f = field();
res.addProperty(f);
        break;
        }
      case MESSAGE:
      case ENUM:{
        f = type_def();
res.addDefinition(f);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENSIONS:{
      extensions();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(34);
res.description = comments(t);
  {if ("" != null) return new Field(name, res);}
    throw new Error("Missing return statement in function");
}

  final public Field enum_def() throws ParseException {Token t = token.next;
  Definition res = new Definition();
  String name;
  String fn;
  Integer fv;
    jj_consume_token(ENUM);
    name = name();
    jj_consume_token(33);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      fn = name();
      jj_consume_token(35);
      fv = number();
      jj_consume_token(36);
Definition option = new Definition();
      option.type = "integer";
      option.addEnum(fv);
      res.addDefinition(fn, option);
      res.addOneOf(Definition.ref(fn));
      //res.type="integer";
      //res.addEnum(fv);

    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENSIONS:{
      extensions();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(34);
res.description = comments(t);
  {if ("" != null) return new Field(name, res);}
    throw new Error("Missing return statement in function");
}

  final public Field field() throws ParseException {Token t = token.next;
  Definition res;
  String name;
  int mod = OPTIONAL;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REQUIRED:
    case OPTIONAL:
    case REPEATED:{
      mod = field_mod();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    res = type();
    name = name();
    jj_consume_token(35);
    jj_consume_token(NUMBER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 37:{
      res.def = default_clause();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(36);
if(mod == REPEATED){
    Definition items = res;
    res = new Definition("array");
    res.items = items;
  }
  res.description = comments(t);
  {if ("" != null) return new Field(name, res, mod == REQUIRED);}
    throw new Error("Missing return statement in function");
}

  final public int field_mod() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REQUIRED:{
      t = jj_consume_token(REQUIRED);
      break;
      }
    case OPTIONAL:{
      t = jj_consume_token(OPTIONAL);
      break;
      }
    case REPEATED:{
      t = jj_consume_token(REPEATED);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.kind;}
    throw new Error("Missing return statement in function");
}

  final public Object default_clause() throws ParseException {Object res;
    jj_consume_token(37);
    jj_consume_token(DEF);
    jj_consume_token(35);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case QUOTE:{
      res = literal();
      break;
      }
    case ID:{
      res = name();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(38);
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public void extensions() throws ParseException {
    jj_consume_token(EXTENSIONS);
    jj_consume_token(NUMBER);
    jj_consume_token(TO);
    jj_consume_token(NUMBER);
    jj_consume_token(36);
}

  final public String syntax() throws ParseException {String val;
    jj_consume_token(SYNTAX);
    jj_consume_token(35);
    val = string();
    jj_consume_token(36);
{if ("" != null) return val;}
    throw new Error("Missing return statement in function");
}

  final public void option() throws ParseException {
    jj_consume_token(OPTION);
    jj_consume_token(ID);
    jj_consume_token(35);
    string();
    jj_consume_token(36);
}

  final public void pack() throws ParseException {
    jj_consume_token(PACKAGE);
    jj_consume_token(ID);
    jj_consume_token(36);
}

  final public Object literal() throws ParseException {Object res;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTE:{
      res = string();
      break;
      }
    case NUMBER:{
      res = number();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public int number() throws ParseException {Token t;
    t = jj_consume_token(NUMBER);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
}

  final public String string() throws ParseException {String res = "";
  Token t;
    jj_consume_token(QUOTE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      t = jj_consume_token(STRING);
res=t.image;
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(ENDQUOTE);
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public String name() throws ParseException {Token t;
    t = jj_consume_token(ID);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public Definition type() throws ParseException {String ref;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE_INT:{
      jj_consume_token(TYPE_INT);
{if ("" != null) return new Definition("integer");}
      break;
      }
    case TYPE_LONG:{
      jj_consume_token(TYPE_LONG);
{if ("" != null) return new Definition("integer", "int64");}
      break;
      }
    case TYPE_FLOAT:{
      jj_consume_token(TYPE_FLOAT);
{if ("" != null) return new Definition("number", "float");}
      break;
      }
    case TYPE_DOUBLE:{
      jj_consume_token(TYPE_DOUBLE);
{if ("" != null) return new Definition("number","double");}
      break;
      }
    case TYPE_BOOL:{
      jj_consume_token(TYPE_BOOL);
{if ("" != null) return new Definition("boolean");}
      break;
      }
    case TYPE_STRING:{
      jj_consume_token(TYPE_STRING);
{if ("" != null) return new Definition("string");}
      break;
      }
    case ID:{
      ref = name();
{if ("" != null) return Definition.ref(ref);}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String comments(Token t) throws ParseException {StringBuilder res = new StringBuilder();
if (t == null || t.specialToken == null){
   {if ("" != null) return null;}
  }
  Token head_t = t.specialToken;

  while (head_t.specialToken != null){
   head_t = head_t.specialToken;
  }

  while (head_t != null) {
    res.append(head_t.image);
    head_t = head_t.next;
  }

  {if ("" != null) return res.toString();}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public ProtoBufParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x2020,0x2020,0x47b21e0,0x47b21e0,0x1000,0x4000000,0x1000,0x1c0,0x0,0x1c0,0x46000000,0x42000000,0x0,0x47b0000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x1,0x0,};
	}

  /** Constructor with InputStream. */
  public ProtoBufParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProtoBufParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ProtoBufParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ProtoBufParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ProtoBufParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ProtoBufParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ProtoBufParser(ProtoBufParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProtoBufParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 15; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
