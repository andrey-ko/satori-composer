gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

apply plugin: 'idea'

group 'com.satori'
version '0.2.8-SNAPSHOT'
buildDir = '.out'

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
  }
  module {
    inheritOutputDirs = false
    outputDir = file(".out/idea")
    testOutputDir = file(".out/idea-tests")
  }
}

task generateReadme(type: TemplateTask) {
  group 'codegen'
  template = file('readme.template.md')
  output = file('readme.md')
  outputs.upToDateWhen { false }
}

subprojects {
  group rootProject.group
  version rootProject.version

  apply plugin: 'java'
  apply plugin: 'idea'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  //tasks.withType(Javadoc).all { enabled = false }

  buildDir = '.out'
  sourceSets.main.java.srcDirs = ['src']
  sourceSets.main.resources.srcDirs = ['res']
  sourceSets.test.java.srcDirs = ['tests/src']
  sourceSets.test.resources.srcDirs = ['tests/res']

  compileJava.options.compilerArgs << "-Xlint:unchecked"
  compileJava.options.compilerArgs << "-Xlint:deprecation"

  idea {
    module {
      inheritOutputDirs = false
      outputDir = file(".out/idea")
      testOutputDir = file(".out/idea-tests")
    }
  }

  repositories {
    mavenCentral()
  }

  dependencies {
  }
}

def publishingProjects = [':composer', ':mods', ':mods-suite'].collect{project(it)}

configure(publishingProjects) {
  apply from: rootProject.file('publishing.gradle')

  task zipOutRepository(type: Zip) {
    group 'github'
    dependsOn pulishToOutRepo
    def groupId = pulishToOutRepo.publication.groupId
    def artifactId = pulishToOutRepo.publication.artifactId
    def version = pulishToOutRepo.publication.version

    def relativeDir = "${groupId.replace('.','/')}/${artifactId.replace('.','/')}/${version}"
    def srcDir =  file("${pulishToOutRepo.repository.url}/$relativeDir")

    from(srcDir){
      into relativeDir
    }
    archiveName "$artifactId v${version}.zip"
    destinationDir buildDir
    doFirst{
      println "zipping $srcDir -> ${outputs.getFiles()*.path.join(',')}"
    }
  }
}

task mergeAllOutRepositories(type: Zip) {
  group 'github'

  publishingProjects.each {
    dependsOn(it.zipOutRepository)
    it.zipOutRepository.outputs.getFiles().each{
      from(zipTree(it))
    }
  }

  archiveName "satori-all v${project.version}.zip"
  destinationDir buildDir
}


ext {
  githubUrl = "https://api.github.com/repos/satori-com/satori-composer/"
}

if (rootProject.file(".gradle/github.gradle").exists()) {
  apply from: rootProject.file(".gradle/github.gradle")
}

task githubListReleases(type: GitHubListReleasesTask){
  url = githubUrl
  authToken = githubAuthToken
}

task githubPublishRelease(type: GitHubPublishReleaseTask){
  url = githubUrl
  authToken = githubAuthToken
  publishingProjects.each {
    asset it.zipOutRepository
  }

  asset mergeAllOutRepositories
}

task info() {
  group 'help'

  println "publishing projects:"
  publishingProjects.each{
    println "  ${it.name}"
  }

  outputs.upToDateWhen{false}
}
