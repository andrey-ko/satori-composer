
task generateCompositionImage(type: GenerateCompositionDiagramTask) {
  group "codegen"
  generateCode.dependsOn it

  cfgPath = file("res/com/satori/mods/resources/config.json")
  imgPath = file("docs/diagram.png")
  blockWidth = 220
  blockHeight = 45
}

task generateCompositionImage2(type: JavaExec) {
  group 'codegen'
  generateCode.dependsOn it

  classpath = configurations.create "generateCompositionImage2Classpath"
  dependencies {
    generateCompositionImage2Classpath "com.satori:satori-libs-composition-drawer:$scaffoldingVersion"
  }

  def cfgPath = file("res/com/satori/mods/resources/config.json")
  def imgPath = file("docs/diagram2.png")

  inputs.file(cfgPath)
  outputs.file(imgPath)

  main = 'com.satori.libs.composition.drawer.App'

  args "--cfg-path", cfgPath
  args "--img-path", imgPath
  args "--block-width", 220
  args "--block-height", 45

  doFirst {
    println "generating composition diagram ...."
    println commandLine.join(" ")
  }
}

task generateCompositionImage3(type: DependencyExec) {
  group "codegen"
  generateCode.dependsOn it

  def cfgPath = file("res/com/satori/mods/resources/config.json")
  def imgPath = file("docs/diagram3.png")

  inputs.file(cfgPath)
  outputs.file(imgPath)

  dependency "com.satori:satori-libs-composition-drawer:$scaffoldingVersion"

  main = "com.satori.libs.composition.drawer.App"

  args "--cfg-path", cfgPath
  args "--img-path", imgPath
  args "--block-width", 220
  args "--block-height", 45

  doFirst {
    println "generating composition diagram ...."
  }
}

dependencies {
  testCompile project(':libs-testlib')
}